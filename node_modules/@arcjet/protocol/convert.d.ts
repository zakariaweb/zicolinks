import type { ArcjetRule, ArcjetRateLimitRule, ArcjetConclusion, ArcjetEmailType, ArcjetMode, ArcjetRuleState, ArcjetStack } from "./index.js";
import { ArcjetRuleResult, ArcjetDecision, ArcjetReason, ArcjetIpDetails } from "./index.js";
import type { IpDetails } from "./proto/decide/v1alpha1/decide_pb.js";
import { Conclusion, Decision, EmailType, Mode, Reason, Rule, RuleResult, RuleState, SDKStack } from "./proto/decide/v1alpha1/decide_pb.js";
export declare function ArcjetModeToProtocol(mode: ArcjetMode): Mode;
export declare function ArcjetEmailTypeToProtocol(emailType: ArcjetEmailType): EmailType;
export declare function ArcjetEmailTypeFromProtocol(emailType: EmailType): ArcjetEmailType;
export declare function ArcjetStackToProtocol(stack: ArcjetStack): SDKStack;
export declare function ArcjetRuleStateToProtocol(stack: ArcjetRuleState): RuleState;
export declare function ArcjetRuleStateFromProtocol(ruleState: RuleState): ArcjetRuleState;
export declare function ArcjetConclusionToProtocol(conclusion: ArcjetConclusion): Conclusion;
export declare function ArcjetConclusionFromProtocol(conclusion: Conclusion): ArcjetConclusion;
export declare function ArcjetReasonFromProtocol(proto?: Reason): ArcjetReason;
export declare function ArcjetReasonToProtocol(reason: ArcjetReason): Reason;
export declare function ArcjetRuleResultToProtocol(ruleResult: ArcjetRuleResult): RuleResult;
export declare function ArcjetRuleResultFromProtocol(proto: RuleResult): ArcjetRuleResult;
export declare function ArcjetDecisionToProtocol(decision: ArcjetDecision): Decision;
export declare function ArcjetIpDetailsFromProtocol(ipDetails?: IpDetails): ArcjetIpDetails;
export declare function ArcjetDecisionFromProtocol(decision?: Decision): ArcjetDecision;
export declare function isRateLimitRule<Props extends {}>(rule: ArcjetRule<Props>): rule is ArcjetRateLimitRule<Props>;
export declare function ArcjetRuleToProtocol<Props extends {
    [key: string]: unknown;
}>(rule: ArcjetRule<Props>): Rule;

export type * from "./well-known-bots.js";
export { categories as botCategories } from "./well-known-bots.js";
type RequiredProps<T, K extends keyof T> = Required<Pick<T, K>> & Omit<T, K>;
export type ArcjetMode = "LIVE" | "DRY_RUN";
export declare const ArcjetMode: Readonly<{
    /**
     * @deprecated Use the string `"LIVE"` instead.
     **/
    LIVE: "LIVE";
    /**
     * @deprecated Use the string `"DRY_RUN"` instead.
     **/
    DRY_RUN: "DRY_RUN";
}>;
export type ArcjetRateLimitAlgorithm = "TOKEN_BUCKET" | "FIXED_WINDOW" | "SLIDING_WINDOW";
export declare const ArcjetRateLimitAlgorithm: Readonly<{
    /**
     * @deprecated Use the string `"TOKEN_BUCKET"` instead.
     **/
    TOKEN_BUCKET: "TOKEN_BUCKET";
    /**
     * @deprecated Use the string `"FIXED_WINDOW"` instead.
     **/
    FIXED_WINDOW: "FIXED_WINDOW";
    /**
     * @deprecated Use the string `"SLIDING_WINDOW"` instead.
     **/
    SLIDING_WINDOW: "SLIDING_WINDOW";
}>;
export type ArcjetEmailType = "DISPOSABLE" | "FREE" | "NO_MX_RECORDS" | "NO_GRAVATAR" | "INVALID";
export declare const ArcjetEmailType: Readonly<{
    /**
     * @deprecated Use the string `"DISPOSABLE"` instead.
     **/
    DISPOSABLE: "DISPOSABLE";
    /**
     * @deprecated Use the string `"FREE"` instead.
     **/
    FREE: "FREE";
    /**
     * @deprecated Use the string `"NO_MX_RECORDS"` instead.
     **/
    NO_MX_RECORDS: "NO_MX_RECORDS";
    /**
     * @deprecated Use the string `"NO_GRAVATAR"` instead.
     **/
    NO_GRAVATAR: "NO_GRAVATAR";
    /**
     * @deprecated Use the string `"INVALID"` instead.
     **/
    INVALID: "INVALID";
}>;
export type ArcjetIdentifiedEntity = {
    start: number;
    end: number;
    identifiedType: string;
};
export type ArcjetStack = "NODEJS" | "NEXTJS" | "BUN" | "SVELTEKIT" | "DENO" | "NESTJS" | "REMIX" | "ASTRO";
export declare const ArcjetStack: Readonly<{
    /**
     * @deprecated Use the string `"NODEJS"` instead.
     **/
    NODEJS: "NODEJS";
    /**
     * @deprecated Use the string `"NEXTJS"` instead.
     **/
    NEXTJS: "NEXTJS";
    /**
     * @deprecated Use the string `"BUN"` instead.
     **/
    BUN: "BUN";
    /**
     * @deprecated Use the string `"SVELTEKIT"` instead.
     **/
    SVELTEKIT: "SVELTEKIT";
    /**
     * @deprecated Use the string `"DENO"` instead.
     **/
    DENO: "DENO";
    /**
     * @deprecated Use the string `"NESTJS"` instead.
     **/
    NESTJS: "NESTJS";
    /**
     * @deprecated Use the string `"REMIX"` instead.
     **/
    REMIX: "REMIX";
    /**
     * @deprecated Use the string `"ASTRO"` instead.
     **/
    ASTRO: "ASTRO";
}>;
export type ArcjetRuleState = "RUN" | "NOT_RUN" | "CACHED" | "DRY_RUN";
export declare const ArcjetRuleState: Readonly<{
    /**
     * @deprecated Use the string `"RUN"` instead.
     **/
    RUN: "RUN";
    /**
     * @deprecated Use the string `"NOT_RUN"` instead.
     **/
    NOT_RUN: "NOT_RUN";
    /**
     * @deprecated Use the string `"CACHED"` instead.
     **/
    CACHED: "CACHED";
    /**
     * @deprecated Use the string `"DRY_RUN"` instead.
     **/
    DRY_RUN: "DRY_RUN";
}>;
export type ArcjetConclusion = "ALLOW" | "DENY" | "CHALLENGE" | "ERROR";
export declare const ArcjetConclusion: Readonly<{
    /**
     * @deprecated Use the string `"ALLOW"` instead.
     **/
    ALLOW: "ALLOW";
    /**
     * @deprecated Use the string `"DENY"` instead.
     **/
    DENY: "DENY";
    /**
     * @deprecated Use the string `"CHALLENGE"` instead.
     **/
    CHALLENGE: "CHALLENGE";
    /**
     * @deprecated Use the string `"ERROR"` instead.
     **/
    ERROR: "ERROR";
}>;
export type ArcjetSensitiveInfoType = "EMAIL" | "PHONE_NUMBER" | "IP_ADDRESS" | "CREDIT_CARD_NUMBER";
export declare const ArcjetSensitiveInfoType: Readonly<{
    /**
     * @deprecated Use the string `"EMAIL"` instead.
     **/
    EMAIL: "EMAIL";
    /**
     * @deprecated Use the string `"PHONE_NUMBER"` instead.
     **/
    PHONE_NUMBER: "PHONE_NUMBER";
    /**
     * @deprecated Use the string `"IP_ADDRESS"` instead.
     **/
    IP_ADDRESS: "IP_ADDRESS";
    /**
     * @deprecated Use the string `"CREDIT_CARD_NUMBER"` instead.
     **/
    CREDIT_CARD_NUMBER: "CREDIT_CARD_NUMBER";
}>;
export type ArcjetRuleType = "LOCAL" | "REMOTE";
export declare const ArcjetRuleType: Readonly<{
    /**
     * @deprecated Use the string `"LOCAL"` instead.
     **/
    LOCAL: "LOCAL";
    /**
     * @deprecated Use the string `"REMOTE"` instead.
     **/
    REMOTE: "REMOTE";
}>;
export declare class ArcjetReason {
    type?: "RATE_LIMIT" | "BOT" | "EDGE_RULE" | "SHIELD" | "EMAIL" | "ERROR" | "SENSITIVE_INFO";
    isSensitiveInfo(): this is ArcjetSensitiveInfoReason;
    isRateLimit(): this is ArcjetRateLimitReason;
    isBot(): this is ArcjetBotReason;
    isEdgeRule(): this is ArcjetEdgeRuleReason;
    isShield(): this is ArcjetShieldReason;
    isEmail(): this is ArcjetEmailReason;
    isError(): this is ArcjetErrorReason;
}
export declare class ArcjetSensitiveInfoReason extends ArcjetReason {
    type: "SENSITIVE_INFO";
    denied: ArcjetIdentifiedEntity[];
    allowed: ArcjetIdentifiedEntity[];
    constructor(init: {
        denied: ArcjetIdentifiedEntity[];
        allowed: ArcjetIdentifiedEntity[];
    });
}
export declare class ArcjetRateLimitReason extends ArcjetReason {
    type: "RATE_LIMIT";
    max: number;
    remaining: number;
    reset: number;
    window: number;
    resetTime?: Date;
    constructor(init: {
        max: number;
        remaining: number;
        reset: number;
        window: number;
        resetTime?: Date;
    });
}
export declare class ArcjetBotReason extends ArcjetReason {
    type: "BOT";
    allowed: Array<string>;
    denied: Array<string>;
    verified: boolean;
    spoofed: boolean;
    constructor(init: {
        allowed: Array<string>;
        denied: Array<string>;
        verified: boolean;
        spoofed: boolean;
    });
    isVerified(): boolean;
    isSpoofed(): boolean;
}
export declare class ArcjetEdgeRuleReason extends ArcjetReason {
    type: "EDGE_RULE";
}
export declare class ArcjetShieldReason extends ArcjetReason {
    type: "SHIELD";
    shieldTriggered: boolean;
    constructor(init: {
        shieldTriggered?: boolean;
    });
}
export declare class ArcjetEmailReason extends ArcjetReason {
    type: "EMAIL";
    emailTypes: ArcjetEmailType[];
    constructor(init: {
        emailTypes?: ArcjetEmailType[];
    });
}
export declare class ArcjetErrorReason extends ArcjetReason {
    type: "ERROR";
    message: string;
    constructor(error: unknown);
}
export declare class ArcjetRuleResult {
    ruleId: string;
    /**
     * The duration in seconds this result should be considered valid, also known
     * as time-to-live.
     */
    ttl: number;
    state: ArcjetRuleState;
    conclusion: ArcjetConclusion;
    reason: ArcjetReason;
    constructor(init: {
        ttl: number;
        state: ArcjetRuleState;
        conclusion: ArcjetConclusion;
        reason: ArcjetReason;
    });
    isDenied(): boolean;
}
export declare class ArcjetIpDetails {
    /**
     * The estimated latitude of the IP address within the `accuracyRadius` margin
     * of error.
     */
    latitude?: number;
    /**
     * The estimated longitude of the IP address - see accuracy_radius for the
     * margin of error.
     */
    longitude?: number;
    /**
     * The accuracy radius of the IP address location in kilometers.
     */
    accuracyRadius?: number;
    /**
     * The timezone of the IP address.
     */
    timezone?: string;
    /**
     * The postal code of the IP address.
     */
    postalCode?: string;
    /**
     * The city the IP address is located in.
     */
    city?: string;
    /**
     * The region the IP address is located in.
     */
    region?: string;
    /**
     * The country code the IP address is located in.
     */
    country?: string;
    /**
     * The country name the IP address is located in.
     */
    countryName?: string;
    /**
     * The continent code the IP address is located in.
     */
    continent?: string;
    /**
     * The continent name the IP address is located in.
     */
    continentName?: string;
    /**
     * The AS number the IP address belongs to.
     */
    asn?: string;
    /**
     * The AS name the IP address belongs to.
     */
    asnName?: string;
    /**
     * The AS domain the IP address belongs to.
     */
    asnDomain?: string;
    /**
     * The ASN type: ISP, hosting, business, or education
     */
    asnType?: string;
    /**
     * The ASN country code the IP address belongs to.
     */
    asnCountry?: string;
    /**
     * The name of the service the IP address belongs to.
     */
    service?: string;
    constructor(init?: {
        latitude?: number;
        longitude?: number;
        accuracyRadius?: number;
        timezone?: string;
        postalCode?: string;
        city?: string;
        region?: string;
        country?: string;
        countryName?: string;
        continent?: string;
        continentName?: string;
        asn?: string;
        asnName?: string;
        asnDomain?: string;
        asnType?: string;
        asnCountry?: string;
        service?: string;
        isHosting?: boolean;
        isVpn?: boolean;
        isProxy?: boolean;
        isTor?: boolean;
        isRelay?: boolean;
    });
    hasLatitude(): this is RequiredProps<this, "latitude" | "accuracyRadius">;
    hasLongitude(): this is RequiredProps<this, "longitude" | "accuracyRadius">;
    hasAccuracyRadius(): this is RequiredProps<this, "latitude" | "longitude" | "accuracyRadius">;
    hasTimezone(): this is RequiredProps<this, "timezone">;
    hasPostalCode(): this is RequiredProps<this, "postalCode">;
    hasCity(): this is RequiredProps<this, "city">;
    hasRegion(): this is RequiredProps<this, "region">;
    hasCountry(): this is RequiredProps<this, "country" | "countryName">;
    hasContintent(): this is RequiredProps<this, "continent" | "continentName">;
    hasASN(): this is RequiredProps<this, "asn" | "asnName" | "asnDomain" | "asnType" | "asnCountry">;
    hasService(): this is RequiredProps<this, "service">;
    /**
     * @returns `true` if the IP address belongs to a hosting provider.
     */
    isHosting(): boolean;
    /**
     * @returns `true` if the IP address belongs to a VPN provider.
     */
    isVpn(): boolean;
    /**
     * @returns `true` if the IP address belongs to a proxy provider.
     */
    isProxy(): boolean;
    /**
     * @returns `true` if the IP address belongs to a Tor node.
     */
    isTor(): boolean;
    /**
     * @returns `true` if the the IP address belongs to a relay service.
     */
    isRelay(): boolean;
}
/**
 * Represents a decision returned by the Arcjet SDK.
 *
 * @property `id` - The unique ID of the decision. This can be used to look up
 * the decision in the Arcjet dashboard.
 * @property `conclusion` - Arcjet's conclusion about the request. This will be
 * one of `"ALLOW"`, `"DENY"`, `"CHALLENGE"`, or `"ERROR"`.
 * @property `reason` - A structured data type about the reason for the
 * decision. One of: {@link ArcjetRateLimitReason}, {@link ArcjetEdgeRuleReason},
 * {@link ArcjetBotReason}, {@link ArcjetShieldReason},
 * {@link ArcjetEmailReason}, or {@link ArcjetErrorReason}.
 * @property `ttl` - The duration in milliseconds this decision should be
 * considered valid, also known as time-to-live.
 * @property `results` - Each separate {@link ArcjetRuleResult} can be found here
 * or by logging into the Arcjet dashboard and searching for the decision `id`.
 */
export declare abstract class ArcjetDecision {
    id: string;
    /**
     * The duration in milliseconds this decision should be considered valid, also
     * known as time-to-live.
     */
    ttl: number;
    results: ArcjetRuleResult[];
    /**
     * Details about the IP address that informed the `conclusion`.
     */
    ip: ArcjetIpDetails;
    abstract conclusion: ArcjetConclusion;
    abstract reason: ArcjetReason;
    constructor(init: {
        id?: string;
        results: ArcjetRuleResult[];
        ttl: number;
        ip?: ArcjetIpDetails;
    });
    isAllowed(): this is ArcjetAllowDecision | ArcjetErrorDecision;
    isDenied(): this is ArcjetDenyDecision;
    isChallenged(): this is ArcjetChallengeDecision;
    isErrored(): this is ArcjetErrorDecision;
}
export declare class ArcjetAllowDecision extends ArcjetDecision {
    conclusion: "ALLOW";
    reason: ArcjetReason;
    constructor(init: {
        id?: string;
        results: ArcjetRuleResult[];
        ttl: number;
        reason: ArcjetReason;
        ip?: ArcjetIpDetails;
    });
}
export declare class ArcjetDenyDecision extends ArcjetDecision {
    conclusion: "DENY";
    reason: ArcjetReason;
    constructor(init: {
        id?: string;
        results: ArcjetRuleResult[];
        ttl: number;
        reason: ArcjetReason;
        ip?: ArcjetIpDetails;
    });
}
export declare class ArcjetChallengeDecision extends ArcjetDecision {
    conclusion: "CHALLENGE";
    reason: ArcjetReason;
    constructor(init: {
        id?: string;
        results: ArcjetRuleResult[];
        ttl: number;
        reason: ArcjetReason;
        ip?: ArcjetIpDetails;
    });
}
export declare class ArcjetErrorDecision extends ArcjetDecision {
    conclusion: "ERROR";
    reason: ArcjetErrorReason;
    constructor(init: {
        id?: string;
        results: ArcjetRuleResult[];
        ttl: number;
        reason: ArcjetErrorReason;
        ip?: ArcjetIpDetails;
    });
}
export interface ArcjetRequestDetails {
    ip: string;
    method: string;
    protocol: string;
    host: string;
    path: string;
    headers: Headers;
    cookies: string;
    query: string;
    extra: {
        [key: string]: string;
    };
    email?: string;
}
export type ArcjetRule<Props extends {} = {}> = {
    type: "RATE_LIMIT" | "BOT" | "EMAIL" | "SHIELD" | "SENSITIVE_INFO" | string;
    mode: ArcjetMode;
    priority: number;
};
export interface ArcjetLocalRule<Props extends {
    [key: string]: unknown;
} = {}> extends ArcjetRule<Props> {
    validate(context: ArcjetContext, details: Partial<ArcjetRequestDetails & Props>): asserts details is ArcjetRequestDetails & Props;
    protect(context: ArcjetContext, details: ArcjetRequestDetails & Props): Promise<ArcjetRuleResult>;
}
export interface ArcjetRateLimitRule<Props extends {}> extends ArcjetRule<Props> {
    type: "RATE_LIMIT";
    algorithm: ArcjetRateLimitAlgorithm;
    characteristics?: string[];
}
export interface ArcjetTokenBucketRateLimitRule<Props extends {}> extends ArcjetRateLimitRule<Props> {
    algorithm: "TOKEN_BUCKET";
    refillRate: number;
    interval: number;
    capacity: number;
}
export interface ArcjetFixedWindowRateLimitRule<Props extends {}> extends ArcjetRateLimitRule<Props> {
    algorithm: "FIXED_WINDOW";
    max: number;
    window: number;
}
export interface ArcjetSlidingWindowRateLimitRule<Props extends {}> extends ArcjetRateLimitRule<Props> {
    algorithm: "SLIDING_WINDOW";
    max: number;
    interval: number;
}
export interface ArcjetEmailRule<Props extends {
    email: string;
}> extends ArcjetLocalRule<Props> {
    type: "EMAIL";
    allow: ArcjetEmailType[];
    deny: ArcjetEmailType[];
    requireTopLevelDomain: boolean;
    allowDomainLiteral: boolean;
}
export interface ArcjetSensitiveInfoRule<Props extends {}> extends ArcjetLocalRule<Props> {
    type: "SENSITIVE_INFO";
    allow: string[];
    deny: string[];
}
export interface ArcjetBotRule<Props extends {}> extends ArcjetLocalRule<Props> {
    type: "BOT";
    allow: Array<string>;
    deny: Array<string>;
}
export interface ArcjetShieldRule<Props extends {}> extends ArcjetRule<Props> {
    type: "SHIELD";
}
export interface ArcjetLogger {
    debug(msg: string, ...args: unknown[]): void;
    debug(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
    info(msg: string, ...args: unknown[]): void;
    info(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
    warn(msg: string, ...args: unknown[]): void;
    warn(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
    error(msg: string, ...args: unknown[]): void;
    error(obj: Record<string, unknown>, msg?: string, ...args: unknown[]): void;
}
export type ArcjetContext = {
    [key: string]: unknown;
    key: string;
    fingerprint: string;
    runtime: string;
    log: ArcjetLogger;
    characteristics: string[];
    getBody: () => Promise<string | undefined>;
    waitUntil?: (promise: Promise<unknown>) => void;
};

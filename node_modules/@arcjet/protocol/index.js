import { typeid } from 'typeid-js';
import { Reason } from './proto/decide/v1alpha1/decide_pb.js';
export { categories as botCategories } from './well-known-bots.js';

const ArcjetMode = Object.freeze({
    /**
     * @deprecated Use the string `"LIVE"` instead.
     **/
    LIVE: "LIVE",
    /**
     * @deprecated Use the string `"DRY_RUN"` instead.
     **/
    DRY_RUN: "DRY_RUN",
});
const ArcjetRateLimitAlgorithm = Object.freeze({
    /**
     * @deprecated Use the string `"TOKEN_BUCKET"` instead.
     **/
    TOKEN_BUCKET: "TOKEN_BUCKET",
    /**
     * @deprecated Use the string `"FIXED_WINDOW"` instead.
     **/
    FIXED_WINDOW: "FIXED_WINDOW",
    /**
     * @deprecated Use the string `"SLIDING_WINDOW"` instead.
     **/
    SLIDING_WINDOW: "SLIDING_WINDOW",
});
const ArcjetEmailType = Object.freeze({
    /**
     * @deprecated Use the string `"DISPOSABLE"` instead.
     **/
    DISPOSABLE: "DISPOSABLE",
    /**
     * @deprecated Use the string `"FREE"` instead.
     **/
    FREE: "FREE",
    /**
     * @deprecated Use the string `"NO_MX_RECORDS"` instead.
     **/
    NO_MX_RECORDS: "NO_MX_RECORDS",
    /**
     * @deprecated Use the string `"NO_GRAVATAR"` instead.
     **/
    NO_GRAVATAR: "NO_GRAVATAR",
    /**
     * @deprecated Use the string `"INVALID"` instead.
     **/
    INVALID: "INVALID",
});
const ArcjetStack = Object.freeze({
    /**
     * @deprecated Use the string `"NODEJS"` instead.
     **/
    NODEJS: "NODEJS",
    /**
     * @deprecated Use the string `"NEXTJS"` instead.
     **/
    NEXTJS: "NEXTJS",
    /**
     * @deprecated Use the string `"BUN"` instead.
     **/
    BUN: "BUN",
    /**
     * @deprecated Use the string `"SVELTEKIT"` instead.
     **/
    SVELTEKIT: "SVELTEKIT",
    /**
     * @deprecated Use the string `"DENO"` instead.
     **/
    DENO: "DENO",
    /**
     * @deprecated Use the string `"NESTJS"` instead.
     **/
    NESTJS: "NESTJS",
    /**
     * @deprecated Use the string `"REMIX"` instead.
     **/
    REMIX: "REMIX",
    /**
     * @deprecated Use the string `"ASTRO"` instead.
     **/
    ASTRO: "ASTRO",
});
const ArcjetRuleState = Object.freeze({
    /**
     * @deprecated Use the string `"RUN"` instead.
     **/
    RUN: "RUN",
    /**
     * @deprecated Use the string `"NOT_RUN"` instead.
     **/
    NOT_RUN: "NOT_RUN",
    /**
     * @deprecated Use the string `"CACHED"` instead.
     **/
    CACHED: "CACHED",
    /**
     * @deprecated Use the string `"DRY_RUN"` instead.
     **/
    DRY_RUN: "DRY_RUN",
});
const ArcjetConclusion = Object.freeze({
    /**
     * @deprecated Use the string `"ALLOW"` instead.
     **/
    ALLOW: "ALLOW",
    /**
     * @deprecated Use the string `"DENY"` instead.
     **/
    DENY: "DENY",
    /**
     * @deprecated Use the string `"CHALLENGE"` instead.
     **/
    CHALLENGE: "CHALLENGE",
    /**
     * @deprecated Use the string `"ERROR"` instead.
     **/
    ERROR: "ERROR",
});
const ArcjetSensitiveInfoType = Object.freeze({
    /**
     * @deprecated Use the string `"EMAIL"` instead.
     **/
    EMAIL: "EMAIL",
    /**
     * @deprecated Use the string `"PHONE_NUMBER"` instead.
     **/
    PHONE_NUMBER: "PHONE_NUMBER",
    /**
     * @deprecated Use the string `"IP_ADDRESS"` instead.
     **/
    IP_ADDRESS: "IP_ADDRESS",
    /**
     * @deprecated Use the string `"CREDIT_CARD_NUMBER"` instead.
     **/
    CREDIT_CARD_NUMBER: "CREDIT_CARD_NUMBER",
});
const ArcjetRuleType = Object.freeze({
    /**
     * @deprecated Use the string `"LOCAL"` instead.
     **/
    LOCAL: "LOCAL",
    /**
     * @deprecated Use the string `"REMOTE"` instead.
     **/
    REMOTE: "REMOTE",
});
class ArcjetReason {
    type;
    isSensitiveInfo() {
        return this.type === "SENSITIVE_INFO";
    }
    isRateLimit() {
        return this.type === "RATE_LIMIT";
    }
    isBot() {
        return this.type === "BOT";
    }
    isEdgeRule() {
        return this.type === "EDGE_RULE";
    }
    isShield() {
        return this.type === "SHIELD";
    }
    isEmail() {
        return this.type === "EMAIL";
    }
    isError() {
        return this.type === "ERROR";
    }
}
class ArcjetSensitiveInfoReason extends ArcjetReason {
    type = "SENSITIVE_INFO";
    denied;
    allowed;
    constructor(init) {
        super();
        this.denied = init.denied;
        this.allowed = init.allowed;
    }
}
class ArcjetRateLimitReason extends ArcjetReason {
    type = "RATE_LIMIT";
    max;
    remaining;
    reset;
    window;
    resetTime;
    constructor(init) {
        super();
        this.max = init.max;
        this.remaining = init.remaining;
        this.reset = init.reset;
        this.window = init.window;
        this.resetTime = init.resetTime;
    }
}
class ArcjetBotReason extends ArcjetReason {
    type = "BOT";
    allowed;
    denied;
    verified;
    spoofed;
    constructor(init) {
        super();
        this.allowed = init.allowed;
        this.denied = init.denied;
        this.verified = init.verified;
        this.spoofed = init.spoofed;
    }
    isVerified() {
        return this.verified;
    }
    isSpoofed() {
        return this.spoofed;
    }
}
class ArcjetEdgeRuleReason extends ArcjetReason {
    type = "EDGE_RULE";
}
class ArcjetShieldReason extends ArcjetReason {
    type = "SHIELD";
    shieldTriggered;
    constructor(init) {
        super();
        this.shieldTriggered = init.shieldTriggered ?? false;
    }
}
class ArcjetEmailReason extends ArcjetReason {
    type = "EMAIL";
    emailTypes;
    constructor(init) {
        super();
        if (typeof init === "undefined") {
            this.emailTypes = [];
        }
        else {
            this.emailTypes = init.emailTypes ?? [];
        }
    }
}
class ArcjetErrorReason extends ArcjetReason {
    type = "ERROR";
    message;
    constructor(error) {
        super();
        // TODO: Get rid of instanceof check
        if (error instanceof Reason) {
            if (error.reason.case === "error") {
                this.message = error.reason.value.message;
                return;
            }
            else {
                this.message = "Missing error reason";
            }
        }
        // TODO: Get rid of instanceof check
        if (error instanceof Error) {
            this.message = error.message;
            return;
        }
        if (typeof error === "string") {
            this.message = error;
            return;
        }
        this.message = "Unknown error occurred";
    }
}
class ArcjetRuleResult {
    ruleId;
    /**
     * The duration in seconds this result should be considered valid, also known
     * as time-to-live.
     */
    ttl;
    state;
    conclusion;
    reason;
    constructor(init) {
        // TODO(#230): Generated, stable IDs for Rules
        this.ruleId = "";
        this.ttl = init.ttl;
        this.state = init.state;
        this.conclusion = init.conclusion;
        this.reason = init.reason;
    }
    isDenied() {
        return this.conclusion === "DENY";
    }
}
class ArcjetIpDetails {
    /**
     * The estimated latitude of the IP address within the `accuracyRadius` margin
     * of error.
     */
    latitude;
    /**
     * The estimated longitude of the IP address - see accuracy_radius for the
     * margin of error.
     */
    longitude;
    /**
     * The accuracy radius of the IP address location in kilometers.
     */
    accuracyRadius;
    /**
     * The timezone of the IP address.
     */
    timezone;
    /**
     * The postal code of the IP address.
     */
    postalCode;
    /**
     * The city the IP address is located in.
     */
    city;
    /**
     * The region the IP address is located in.
     */
    region;
    /**
     * The country code the IP address is located in.
     */
    country;
    /**
     * The country name the IP address is located in.
     */
    countryName;
    /**
     * The continent code the IP address is located in.
     */
    continent;
    /**
     * The continent name the IP address is located in.
     */
    continentName;
    /**
     * The AS number the IP address belongs to.
     */
    asn;
    /**
     * The AS name the IP address belongs to.
     */
    asnName;
    /**
     * The AS domain the IP address belongs to.
     */
    asnDomain;
    /**
     * The ASN type: ISP, hosting, business, or education
     */
    asnType;
    /**
     * The ASN country code the IP address belongs to.
     */
    asnCountry;
    /**
     * The name of the service the IP address belongs to.
     */
    service;
    constructor(init = {}) {
        this.latitude = init.latitude;
        this.longitude = init.longitude;
        this.accuracyRadius = init.accuracyRadius;
        this.timezone = init.timezone;
        this.postalCode = init.postalCode;
        this.city = init.city;
        this.region = init.region;
        this.country = init.country;
        this.countryName = init.countryName;
        this.continent = init.continent;
        this.continentName = init.continentName;
        this.asn = init.asn;
        this.asnName = init.asnName;
        this.asnDomain = init.asnDomain;
        this.asnType = init.asnType;
        this.asnCountry = init.asnCountry;
        this.service = init.service;
        // TypeScript creates symbols on the class when using `private` or `#`
        // identifiers for tracking these properties. We don't want to end up with
        // the same issues as Next.js with private symbols so we use
        // `Object.defineProperties` here and then `@ts-expect-error` when we access
        // the values. This is mostly to improve the editor experience, as props
        // starting with `_` are sorted to the top of autocomplete.
        Object.defineProperties(this, {
            _isHosting: {
                configurable: false,
                enumerable: false,
                writable: false,
                value: init.isHosting ?? false,
            },
            _isVpn: {
                configurable: false,
                enumerable: false,
                writable: false,
                value: init.isVpn ?? false,
            },
            _isProxy: {
                configurable: false,
                enumerable: false,
                writable: false,
                value: init.isProxy ?? false,
            },
            _isTor: {
                configurable: false,
                enumerable: false,
                writable: false,
                value: init.isTor ?? false,
            },
            _isRelay: {
                configurable: false,
                enumerable: false,
                writable: false,
                value: init.isRelay ?? false,
            },
        });
    }
    hasLatitude() {
        return typeof this.latitude !== "undefined";
    }
    hasLongitude() {
        return typeof this.longitude !== "undefined";
    }
    hasAccuracyRadius() {
        return typeof this.accuracyRadius !== "undefined";
    }
    hasTimezone() {
        return typeof this.timezone !== "undefined";
    }
    hasPostalCode() {
        return typeof this.postalCode !== "undefined";
    }
    // TODO: If we have city, what other data are we sure to have?
    hasCity() {
        return typeof this.city !== "undefined";
    }
    // TODO: If we have region, what other data are we sure to have?
    hasRegion() {
        return typeof this.region !== "undefined";
    }
    // If we have country, we should have country name
    // TODO: If we have country, should we also have continent?
    hasCountry() {
        return typeof this.country !== "undefined";
    }
    // If we have continent, we should have continent name
    hasContintent() {
        return typeof this.continent !== "undefined";
    }
    // If we have ASN, we should have every piece of ASN information.
    hasASN() {
        return typeof this.asn !== "undefined";
    }
    hasService() {
        return typeof this.service !== "undefined";
    }
    /**
     * @returns `true` if the IP address belongs to a hosting provider.
     */
    isHosting() {
        // @ts-expect-error because we attach this with Object.defineProperties
        return this._isHosting;
    }
    /**
     * @returns `true` if the IP address belongs to a VPN provider.
     */
    isVpn() {
        // @ts-expect-error because we attach this with Object.defineProperties
        return this._isVpn;
    }
    /**
     * @returns `true` if the IP address belongs to a proxy provider.
     */
    isProxy() {
        // @ts-expect-error because we attach this with Object.defineProperties
        return this._isProxy;
    }
    /**
     * @returns `true` if the IP address belongs to a Tor node.
     */
    isTor() {
        // @ts-expect-error because we attach this with Object.defineProperties
        return this._isTor;
    }
    /**
     * @returns `true` if the the IP address belongs to a relay service.
     */
    isRelay() {
        // @ts-expect-error because we attach this with Object.defineProperties
        return this._isRelay;
    }
}
/**
 * Represents a decision returned by the Arcjet SDK.
 *
 * @property `id` - The unique ID of the decision. This can be used to look up
 * the decision in the Arcjet dashboard.
 * @property `conclusion` - Arcjet's conclusion about the request. This will be
 * one of `"ALLOW"`, `"DENY"`, `"CHALLENGE"`, or `"ERROR"`.
 * @property `reason` - A structured data type about the reason for the
 * decision. One of: {@link ArcjetRateLimitReason}, {@link ArcjetEdgeRuleReason},
 * {@link ArcjetBotReason}, {@link ArcjetShieldReason},
 * {@link ArcjetEmailReason}, or {@link ArcjetErrorReason}.
 * @property `ttl` - The duration in milliseconds this decision should be
 * considered valid, also known as time-to-live.
 * @property `results` - Each separate {@link ArcjetRuleResult} can be found here
 * or by logging into the Arcjet dashboard and searching for the decision `id`.
 */
class ArcjetDecision {
    id;
    /**
     * The duration in milliseconds this decision should be considered valid, also
     * known as time-to-live.
     */
    ttl;
    results;
    /**
     * Details about the IP address that informed the `conclusion`.
     */
    ip;
    constructor(init) {
        if (typeof init.id === "string") {
            this.id = init.id;
        }
        else {
            this.id = typeid("lreq").toString();
        }
        this.results = init.results;
        this.ttl = init.ttl;
        this.ip = init.ip ?? new ArcjetIpDetails();
    }
    isAllowed() {
        return this.conclusion === "ALLOW" || this.conclusion === "ERROR";
    }
    isDenied() {
        return this.conclusion === "DENY";
    }
    isChallenged() {
        return this.conclusion === "CHALLENGE";
    }
    isErrored() {
        return this.conclusion === "ERROR";
    }
}
class ArcjetAllowDecision extends ArcjetDecision {
    conclusion = "ALLOW";
    reason;
    constructor(init) {
        super(init);
        this.reason = init.reason;
    }
}
class ArcjetDenyDecision extends ArcjetDecision {
    conclusion = "DENY";
    reason;
    constructor(init) {
        super(init);
        this.reason = init.reason;
    }
}
class ArcjetChallengeDecision extends ArcjetDecision {
    conclusion = "CHALLENGE";
    reason;
    constructor(init) {
        super(init);
        this.reason = init.reason;
    }
}
class ArcjetErrorDecision extends ArcjetDecision {
    conclusion = "ERROR";
    reason;
    constructor(init) {
        super(init);
        this.reason = init.reason;
    }
}

export { ArcjetAllowDecision, ArcjetBotReason, ArcjetChallengeDecision, ArcjetConclusion, ArcjetDecision, ArcjetDenyDecision, ArcjetEdgeRuleReason, ArcjetEmailReason, ArcjetEmailType, ArcjetErrorDecision, ArcjetErrorReason, ArcjetIpDetails, ArcjetMode, ArcjetRateLimitAlgorithm, ArcjetRateLimitReason, ArcjetReason, ArcjetRuleResult, ArcjetRuleState, ArcjetRuleType, ArcjetSensitiveInfoReason, ArcjetSensitiveInfoType, ArcjetShieldReason, ArcjetStack };

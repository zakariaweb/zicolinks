import type { ArcjetDecision, ArcjetOptions as CoreOptions, Primitive, Product, ExtraProps, CharacteristicProps } from "arcjet";
export * from "arcjet";
type Simplify<T> = {
    [KeyType in keyof T]: T[KeyType];
} & {};
declare const emptyObjectSymbol: unique symbol;
type WithoutCustomProps = {
    [emptyObjectSymbol]?: never;
};
type PlainObject = {
    [key: string]: unknown;
};
export type RemoteClientOptions = {
    baseUrl?: string;
    timeout?: number;
};
export declare function createRemoteClient(options?: RemoteClientOptions): import("@arcjet/protocol/client.js").Client;
type EventHandlerLike = (event: string, listener: (...args: any[]) => void) => void;
export interface ArcjetNodeRequest {
    headers?: Record<string, string | string[] | undefined>;
    socket?: Partial<{
        remoteAddress: string;
        encrypted: boolean;
    }>;
    method?: string;
    httpVersion?: string;
    url?: string;
    body?: unknown;
    on?: EventHandlerLike;
    removeListener?: EventHandlerLike;
    readable?: boolean;
}
/**
 * The options used to configure an {@link ArcjetNode} client.
 */
export type ArcjetOptions<Rules extends [...Array<Primitive | Product>], Characteristics extends readonly string[]> = Simplify<CoreOptions<Rules, Characteristics> & {
    /**
     * One or more IP Address of trusted proxies in front of the application.
     * These addresses will be excluded when Arcjet detects a public IP address.
     */
    proxies?: Array<string>;
}>;
/**
 * The ArcjetNode client provides a public `protect()` method to
 * make a decision about how a Node.js request should be handled.
 */
export interface ArcjetNode<Props extends PlainObject> {
    /**
     * Runs a request through the configured protections. The request is
     * analyzed and then a decision made on whether to allow, deny, or challenge
     * the request.
     *
     * @param req - An `IncomingMessage` provided to the request handler.
     * @param props - Additonal properties required for running rules against a request.
     * @returns An {@link ArcjetDecision} indicating Arcjet's decision about the request.
     */
    protect(request: ArcjetNodeRequest, ...props: Props extends WithoutCustomProps ? [] : [Props]): Promise<ArcjetDecision>;
    /**
     * Augments the client with another rule. Useful for varying rules based on
     * criteria in your handlerâ€”e.g. different rate limit for logged in users.
     *
     * @param rule The rule to add to this execution.
     * @returns An augmented {@link ArcjetNode} client.
     */
    withRule<Rule extends Primitive | Product>(rule: Rule): ArcjetNode<Simplify<Props & ExtraProps<Rule>>>;
}
/**
 * Create a new {@link ArcjetNode} client. Always build your initial client
 * outside of a request handler so it persists across requests. If you need to
 * augment a client inside a handler, call the `withRule()` function on the base
 * client.
 *
 * @param options - Arcjet configuration options to apply to all requests.
 */
export default function arcjet<const Rules extends (Primitive | Product)[], const Characteristics extends readonly string[]>(options: ArcjetOptions<Rules, Characteristics>): ArcjetNode<Simplify<ExtraProps<Rules> & CharacteristicProps<Characteristics>>>;
